(ns docai.metrics
  (:require [clojure.data.json :as json]
            [next.jdbc :as jdbc]
            [docai.pg :as pg]
            [docai.llm :as llm]
            [clojure.string :as str]))

;; Tabela para logs de intera√ß√µes RAG
(def rag-logs-table "CREATE TABLE IF NOT EXISTS rag_logs (
                      id SERIAL PRIMARY KEY,
                      query TEXT NOT NULL,
                      retrieved_docs TEXT,
                      response TEXT,
                      latency_ms INTEGER,
                      timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )")

;; Tabela para feedback do usu√°rio
(def user-feedback-table "CREATE TABLE IF NOT EXISTS user_feedback (
                           id SERIAL PRIMARY KEY,
                           query_id INTEGER REFERENCES rag_logs(id) ON DELETE CASCADE,
                           response_id INTEGER REFERENCES rag_logs(id),
                           feedback_type TEXT CHECK (feedback_type IN ('positive', 'negative', 'neutral')),
                           feedback_text TEXT,
                           timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                         )")

(defn setup-metrics-tables!
  "Configura tabelas para m√©tricas e monitoramento"
  []
  (if (pg/check-postgres-connection)
    (let [conn (jdbc/get-connection pg/db-spec)]
      (try
        (jdbc/execute! conn [rag-logs-table])
        (jdbc/execute! conn [user-feedback-table])
        (println "‚úÖ Tabelas de m√©tricas configuradas com sucesso")
        true
        (catch Exception e
          (println "‚ùå Erro ao configurar tabelas de m√©tricas:" (.getMessage e))
          false)
        (finally
          (.close conn))))
    false))

(defn log-rag-interaction
  "Registra uma intera√ß√£o RAG para an√°lise posterior"
  [query retrieved-docs response latency]
  (if (pg/check-postgres-connection)
    (let [conn (jdbc/get-connection pg/db-spec)]
      (try
        (jdbc/execute! conn
                       ["INSERT INTO rag_logs 
                        (query, retrieved_docs, response, latency_ms)
                        VALUES (?, ?, ?, ?)"
                        query
                        (json/write-str retrieved-docs)
                        response
                        latency])
        (println "‚úÖ Intera√ß√£o RAG registrada com sucesso")
        true
        (catch Exception e
          (println "‚ö†Ô∏è Erro ao registrar intera√ß√£o RAG:" (.getMessage e))
          false)
        (finally
          (.close conn))))
    ;; Se n√£o conseguir conectar ao banco, apenas logar no console
    (do
      (println "‚ÑπÔ∏è M√©tricas (modo offline):")
      (println "  Query: " query)
      (println "  Docs recuperados: " (count retrieved-docs))
      (println "  Lat√™ncia: " latency "ms")
      false)))

(defn process-user-feedback
  "Processa feedback expl√≠cito do usu√°rio"
  [query-id feedback-type feedback-text]
  (if (pg/check-postgres-connection)
    (let [conn (jdbc/get-connection pg/db-spec)]
      (try
        ;; Registrar feedback no banco de dados
        (jdbc/execute! conn
                       ["INSERT INTO user_feedback 
                        (query_id, feedback_type, feedback_text) 
                        VALUES (?, ?, ?)"
                        query-id feedback-type feedback-text])

        ;; Para feedback negativo, adicionar √† fila de revis√£o
        (when (= feedback-type "negative")
          (println "‚ö†Ô∏è Feedback negativo registrado para an√°lise"))

        (println "‚úÖ Feedback processado com sucesso")
        true
        (catch Exception e
          (println "‚ùå Erro ao processar feedback:" (.getMessage e))
          false)
        (finally
          (.close conn))))
    false))

(defn calculate-rag-metrics
  "Calcula m√©tricas de desempenho para um per√≠odo"
  [start-date end-date]
  (when (pg/check-postgres-connection)
    (let [conn (jdbc/get-connection pg/db-spec)]
      (try
        (let [logs (jdbc/execute! conn
                                 ["SELECT * FROM rag_logs 
                                  WHERE timestamp BETWEEN ? AND ?"
                                  start-date end-date])
              count-logs (count logs)
              avg-latency (if (pos? count-logs)
                            (/ (reduce + (map :latency_ms logs)) count-logs)
                            0)
              sorted-latencies (sort (map :latency_ms logs))
              p95-latency (if (pos? count-logs)
                            (nth sorted-latencies (int (* 0.95 count-logs)) 0)
                            0)
              results {:total_queries count-logs
                       :avg_latency avg-latency
                       :p95_latency p95-latency}]
          (println "üìä M√©tricas RAG calculadas:")
          (println "  Total de consultas: " count-logs)
          (println "  Lat√™ncia m√©dia: " avg-latency "ms")
          (println "  Lat√™ncia P95: " p95-latency "ms")
          results)
        (catch Exception e
          (println "‚ùå Erro ao calcular m√©tricas:" (.getMessage e))
          nil)
        (finally (.close conn))))))

;; Fun√ß√£o auxiliar para chamar LLM avaliador
(defn call-evaluation-llm
  "Chama LLM para avalia√ß√£o (usa o mesmo LLM da aplica√ß√£o por simplicidade)"
  [prompt]
  (try
    (llm/call-ollama-api prompt)
    (catch Exception e
      (println "Erro ao chamar LLM avaliador:" (.getMessage e))
      "Erro na avalia√ß√£o. Score padr√£o: 5/10.")))

(defn evaluate-response-quality
  "Avalia m√©tricas qualitativas de uma resposta RAG usando LLM.
   Esta fun√ß√£o implementa avalia√ß√£o automatizada de qualidade para monitoramento cont√≠nuo."
  [query context response]
  (let [;; Construir prompt para avalia√ß√£o de fidelidade
        prompt-faithfulness (str "Voc√™ √© um avaliador especializado em sistemas RAG. "
                                 "Avalie a fidelidade da seguinte resposta ao contexto fornecido.\n\n"
                                 "Consulta: " query "\n\n"
                                 "Contexto: " (if (> (count context) 500)
                                                (str (subs context 0 500) "...")
                                                context) "\n\n"
                                 "Resposta: " response "\n\n"
                                 "A resposta cont√©m informa√ß√µes que n√£o est√£o no contexto? "
                                 "A resposta contradiz o contexto em algum ponto? "
                                 "Atribua uma pontua√ß√£o de 1 a 10, onde 10 significa perfeita fidelidade ao contexto.")

        ;; Chamar LLM para avalia√ß√£o
        faithfulness-result (call-evaluation-llm prompt-faithfulness)

        ;; Extrair score num√©rico (implementa√ß√£o simplificada)
        score-pattern #"(\d+)(?:\.\d+)?"
        matches (re-find score-pattern faithfulness-result)
        score (if matches
                (try
                  (Integer/parseInt (second matches))
                  (catch Exception _ 5))
                5)]

    {:faithfulness score
     :evaluation faithfulness-result}))

;; Adicionar uma fun√ß√£o para coletar feedback de usu√°rio via console
(defn collect-user-feedback
  "Coleta feedback diretamente do usu√°rio para uma consulta espec√≠fica"
  [query-id]
  (println "\n=== Feedback para a consulta ===")
  (println "Como voc√™ avalia a resposta? (positivo/negativo/neutro)")
  (print "Avalia√ß√£o: ")
  (flush)
  (let [feedback-type (str/lower-case (or (read-line) "neutro"))]
    ;; Validar entrada
    (if (contains? #{"positivo" "negativo" "neutro"} feedback-type)
      (do
        (println "Coment√°rios adicionais (opcional):")
        (print "> ")
        (flush)
        (let [feedback-text (read-line)
              ;; Padronizar tipos de feedback para o formato do banco
              db-feedback-type (case feedback-type
                                 "positivo" "positive"
                                 "negativo" "negative"
                                 "neutro" "neutral")]
          (if (process-user-feedback query-id db-feedback-type feedback-text)
            (println "‚úÖ Feedback registrado com sucesso!")
            (println "‚ùå N√£o foi poss√≠vel registrar o feedback."))))
      (println "‚ùå Tipo de feedback inv√°lido. Use 'positivo', 'negativo' ou 'neutro'."))))